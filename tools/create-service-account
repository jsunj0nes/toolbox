#!/bin/bash

kubeconfig=false

#get cmd line arguments
  while [[ "$#" -gt 0 ]]; do case $1 in
    -u|--user) accountname="$2"; shift;;
    -k|--kubeconfig) kubeconfig=true;;
    *) echo "Unknown parameter passed: $1"; exit 1;;
  esac; shift; done

#setup variables
  cname=$(hostname | grep -oPe '[.\w]+(k8s)')
  domain=$(grep "search" /etc/resolv.conf | tail -1 | cut -f2 -d ' ')
  server="$cname.$domain"
  HOST_ROOT=/media/root
  SOURCE_KUBECONFIG=$HOST_ROOT/etc/kubernetes/kubeconfig

#create account and optionally create kubeconfig file
if [ -z "$accountname" ]; then
  echo "Account Name Not Specified"
else
  exist=$(kubectl get serviceaccount -n kube-system --no-headers "$accountname" | cut -f1 -d ' ')
if [ "$exist" = "$accountname" ]; then
    echo "Account Exists"
  else
    kubectl create serviceaccount "$accountname" --namespace kube-system
    kubectl create clusterrolebinding "$accountname-crb" --clusterrole="cluster-admin" --serviceaccount=kube-system:"$accountname"
  fi
  if [ "$kubeconfig" = false ]; then
    echo "kube config will not be generated"
  else
    cluster_name=$(jyparser $SOURCE_KUBECONFIG get -r ".clusters[0].name")
    # Get User Token
      secret=$(kubectl describe serviceaccount $accountname -n kube-system)
      secretname=$(echo "$secret" | grep Tokens | tr -s ' ' | cut -f2 -d ' ')
      namespace=$(echo "$secret" | grep Namespace | tr -s ' ' | cut -f2 -d ' ')
      token=$(kubectl describe secret "$secretname" -n "$namespace" | grep 'token:' | tr -s ' ' | cut -f2 -d ' ')
    # Get Cert Authority Token
      cad=$(grep 'certificate-authority-data:' $SOURCE_KUBECONFIG)
    echo "Creating kube config"

cat >"$accountname" <<EOF
apiVersion: v1
clusters:
- cluster:
$cad
    server: https://$server:6443
  name: $cluster_name
contexts:
- context:
    cluster: $cluster_name
    namespace: $namespace
    user: $accountname
  name: $cluster_name
current-context: $cluster_name
kind: Config
preferences: {}
users:
- name: $accountname
  user:
    as-user-extra: {}
    token: $token
EOF

      echo "kube config located at" "$(readlink -f "$accountname")"
    fi
fi
